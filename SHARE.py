# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Tue May 23 17:29:51 2023
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))